}
}
}
l.choices
choices.ind
par(mfrow=c(l.choices,l.choices))
for(col in choices.ind){
for(row in choices.ind){
if(col==row){
temp = data[,col]
iNZightPlot(temp,xlab=choices[col],main=NULL)
}else{
x=data[,col]
y=data[,row]
iNZightPlot(x,y,xlab=choices[col],ylab=choices[row],main=NULL)
}
}
}
print(choices)
if(!is.null(choices)){
choices.ind = which(colnames(data)%in%choices)
}
choices.ind = which(colnames(data)%in%choices)
l.choices=length(choices)
par(mfrow=c(l.choices,l.choices))
for(col in choices.ind){
for(row in choices.ind){
if(col==row){
temp = data[,col]
plot(x)
#             iNZightPlot(temp,xlab=choices[col],main=NULL)
}else{
x=data[,col]
y=data[,row]
plot(x,y)
#             iNZightPlot(x,y,xlab=choices[col],ylab=choices[row],main=NULL)
}
}
}
?iNZightPlot
print(choices)
choices.ind = which(colnames(data)%in%choices)
l.choices=length(choices)
par(mfrow=c(l.choices,l.choices))
for(col in choices.ind){
for(row in choices.ind){
if(col==row){
temp = data[,col]
plot(1:10)
#             iNZightPlot(temp,xlab=choices[col],main=NULL)
}else{
x=data[,col]
y=data[,row]
plot(1:10)
#             iNZightPlot(x,y,xlab=choices[col],ylab=choices[row],main=NULL)
}
}
}
dev.off()
print(choices)
if(!is.null(choices)){
choices.ind = which(colnames(data)%in%choices)
l.choices=length(choices)
par(mfrow=c(l.choices,l.choices))
for(col in choices.ind){
for(row in choices.ind){
if(col==row){
temp = data[,col]
iNZightPlot(temp,xlab=choices[col],main=NULL)
}else{
x=data[,col]
y=data[,row]
iNZightPlot(x,y,xlab=choices[col],ylab=choices[row],main=NULL)
}
}
}
}
choices.ind = which(colnames(data)%in%choices)
l.choices=length(choices)
par(mfrow=c(l.choices,l.choices))
for(col in choices.ind){
for(row in choices.ind){
if(col==row){
temp = data[,col]
p = iNZightPlot(temp,xlab=choices[col],main=NULL)
p
}else{
x=data[,col]
y=data[,row]
p = iNZightPlot(x,y,xlab=choices[col],ylab=choices[row],main=NULL)
p
}
}
}
?iNZpar
?iNZpar
??iNZpar
?inzPlotDefaults()
iNZight()
iNZightPlot
plot
?plot
?iNZmatrix
iNZmatrix
?pushViewport
?grid.layout
?iNZightPlot
shiny::runApp()
matrix(1:(l.choices*l.choices),nrow=l.choices)
?iNZightPlot
grid.newpage()
library(iNZight)
grid.newpage()
layout1 <- grid.layout(nrow = 2, ncol = 1)
pushViewport(viewport(layout = layout1, name = "mylayout"))
pushViewport(viewport(row = 1))
?viewport
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
layout(matrix(1:(l.choices*l.choices),nrow=l.choices))
shiny::runApp()
library(iNZight)
grid.newpage()
layout1 <- grid.layout(nrow = 2, ncol = 1)
pushViewport(viewport(layout = layout1, name = "mylayout"))
pushViewport(viewport(row = 1))
?viewport
iNZightPlot(1:10, new = FALSE)
seekViewport("mylayout")
iNZightPlot(x, y, new = FALSE)
iNZightPlot(11:20, new = FALSE)
iNZightPlot(1:10, new = FALSE)
iNZightPlot(1:10, new = FALSE)
grid.newpage()
layout1 <- grid.layout(nrow = 2, ncol = 1)
pushViewport(viewport(layout = layout1, name = "mylayout"))
pushViewport(viewport(row = 1))
?viewport
viewport()
print(viewport())
?grid.layout
grid.newpage()
# This is like par(mfrow = c(2, 1))
layout1 <- grid.layout(nrow = 2, ncol = 1)
pushViewport(viewport(layout = layout1, name = "mylayout"))
iNZightPlot(1:10, new = FALSE)
seekViewport("mylayout")
iNZightPlot(11:20, new = FALSE)
iNZightPlot(1:10, new = FALSE)
grid.newpage()
layout1 <- grid.layout(nrow = 2, ncol = 1)
pushViewport(viewport(layout = layout1, name = "mylayout"))
pushViewport(viewport(row = 1))
grid.newpage()
# This is like par(mfrow = c(2, 1))
layout1 <- grid.layout(nrow = 2, ncol = 1)
pushViewport(viewport(layout = layout1, name = "mylayout"))
pushViewport(viewport(x = 1))
iNZightPlot(1:10, new = FALSE)
# need to go back to the mylayout viewport
seekViewport("mylayout")
# and repeat for second plot
pushViewport(viewport(x = 2))
iNZightPlot(11:20, new = FALSE)
grid.newpage()
# This is like par(mfrow = c(2, 1))
layout1 <- grid.layout(nrow = 2, ncol = 1)
pushViewport(viewport(layout = layout1, name = "mylayout"))
pushViewport(viewport(x = 1,y=1))
iNZightPlot(1:10, new = FALSE)
# need to go back to the mylayout viewport
seekViewport("mylayout")
# and repeat for second plot
pushViewport(viewport(x = 2,y=1))
iNZightPlot(11:20, new = FALSE)
grid.newpage()
# This is like par(mfrow = c(2, 1))
layout1 <- grid.layout(nrow = 2, ncol = 1)
pushViewport(viewport(layout = layout1, name = "mylayout"))
pushViewport(viewport(layout.pos.row=1,layout.pos.col=1))
iNZightPlot(1:10, new = FALSE)
# need to go back to the mylayout viewport
seekViewport("mylayout")
# and repeat for second plot
pushViewport(viewport(layout.pos.row=2,layout.pos.col=1))
iNZightPlot(11:20, new = FALSE)
grid.newpage()
# This is like par(mfrow = c(2, 1))
layout1 <- grid.layout(nrow = 2, ncol = 1)
pushViewport(viewport(layout = layout1, name = "mylayout"))
pushViewport(viewport(layout.pos.row=1,layout.pos.col=1))
iNZightPlot(1:10, new = FALSE)
pushViewport(viewport(layout.pos.row=2,layout.pos.col=1))
iNZightPlot(11:20, new = FALSE)
seekViewport("mylayout")
pushViewport(viewport(layout.pos.row=2,layout.pos.col=1))
iNZightPlot(11:20, new = FALSE)
grid.newpage()
layout1 <- grid.layout(nrow = 2, ncol = 1)
pushViewport(viewport(layout = layout1, name = "mylayout"))
pushViewport(viewport(layout.pos.row=1,layout.pos.col=1))
iNZightPlot(1:10, new = FALSE)
# need to go back to the mylayout viewport
seekViewport("mylayout")
# and repeat for second plot
pushViewport(viewport(layout.pos.row=2,layout.pos.col=1))
iNZightPlot(11:20, new = FALSE)
grid.newpage()
# This is like par(mfrow = c(2, 1))
layout1 <- grid.layout(nrow = 2, ncol = 1)
pushViewport(viewport(layout = layout1, name = "mylayout"))
pushViewport(viewport(layout.pos.row=1))
iNZightPlot(1:10, new = FALSE)
# need to go back to the mylayout viewport
seekViewport("mylayout")
# and repeat for second plot
pushViewport(viewport(layout.pos.row=2))
iNZightPlot(11:20, new = FALSE)
grid.show.viewport(viewport(x=0.6, y=0.6,
w=unit(1, "inches"), h=unit(1, "inches")))
clip.demo <- function(i, j, clip1, clip2) {
pushViewport(viewport(layout.pos.col=i,
layout.pos.row=j))
pushViewport(viewport(width=0.6, height=0.6, clip=clip1))
grid.rect(gp=gpar(fill="white"))
grid.circle(r=0.55, gp=gpar(col="red", fill="pink"))
popViewport()
pushViewport(viewport(width=0.6, height=0.6, clip=clip2))
grid.polygon(x=c(0.5, 1.1, 0.6, 1.1, 0.5, -0.1, 0.4, -0.1),
y=c(0.6, 1.1, 0.5, -0.1, 0.4, -0.1, 0.5, 1.1),
gp=gpar(col="blue", fill="light blue"))
popViewport(2)
}
grid.newpage()
grid.rect(gp=gpar(fill="grey"))
pushViewport(viewport(layout=grid.layout(2, 2)))
clip.demo(1, 1, FALSE, FALSE)
clip.demo(1, 2, TRUE, FALSE)
clip.demo(2, 1, FALSE, TRUE)
clip.demo(2, 2, TRUE, TRUE)
popViewport()
grid.newpage()
pushViewport(viewport(w=.5, h=.5, clip="on"))
grid.rect()
grid.circle(r=.6, gp=gpar(lwd=10))
pushViewport(viewport(clip="inherit"))
grid.circle(r=.6, gp=gpar(lwd=5, col="grey"))
pushViewport(viewport(clip="off"))
grid.circle(r=.6)
popViewport(3)
clip.demo <- function(i, j, clip1, clip2) {
pushViewport(viewport(layout.pos.col=i,
layout.pos.row=j))
pushViewport(viewport(width=0.6, height=0.6, clip=clip1))
grid.rect(gp=gpar(fill="white"))
grid.circle(r=0.55, gp=gpar(col="red", fill="pink"))
popViewport()
pushViewport(viewport(width=0.6, height=0.6, clip=clip2))
grid.polygon(x=c(0.5, 1.1, 0.6, 1.1, 0.5, -0.1, 0.4, -0.1),
y=c(0.6, 1.1, 0.5, -0.1, 0.4, -0.1, 0.5, 1.1),
gp=gpar(col="blue", fill="light blue"))
popViewport(2)
}
grid.newpage()
pushViewport(viewport(layout=grid.layout(2, 2)))
clip.demo(1, 1, FALSE, FALSE)
clip.demo(1, 2, TRUE, FALSE)
clip.demo(2, 1, FALSE, TRUE)
clip.demo(2, 2, TRUE, TRUE)
# This is like par(mfrow = c(2, 1))
clip.demo <- function(i, j) {
pushViewport(viewport(layout.pos.col=i,
layout.pos.row=j))
pushViewport(viewport(width=0.6, height=0.6, clip=TRUE))
iNZightPlot(11:20, new = FALSE)
#   grid.rect(gp=gpar(fill="white"))
#   grid.circle(r=0.55, gp=gpar(col="red", fill="pink"))
#   popViewport()
#   pushViewport(viewport(width=0.6, height=0.6, clip=clip2))
#   grid.polygon(x=c(0.5, 1.1, 0.6, 1.1, 0.5, -0.1, 0.4, -0.1),
#                y=c(0.6, 1.1, 0.5, -0.1, 0.4, -0.1, 0.5, 1.1),
#                gp=gpar(col="blue", fill="light blue"))
popViewport(2)
}
grid.newpage()
pushViewport(viewport(layout=grid.layout(2, 2)))
clip.demo(1, 1)
clip.demo(1, 2)
clip.demo <- function(i, j, clip1, clip2) {
pushViewport(viewport(layout.pos.col=i,
layout.pos.row=j))
pushViewport(viewport(width=0.6, height=0.6, clip=clip1))
iNZightPlot(11:20, new = FALSE)
#   grid.rect(gp=gpar(fill="white"))
#   grid.circle(r=0.55, gp=gpar(col="red", fill="pink"))
#   popViewport()
#   pushViewport(viewport(width=0.6, height=0.6, clip=clip2))
#   grid.polygon(x=c(0.5, 1.1, 0.6, 1.1, 0.5, -0.1, 0.4, -0.1),
#                y=c(0.6, 1.1, 0.5, -0.1, 0.4, -0.1, 0.5, 1.1),
#                gp=gpar(col="blue", fill="light blue"))
popViewport(2)
}
grid.newpage()
pushViewport(viewport(layout=grid.layout(2, 2)))
clip.demo(1, 1, FALSE, FALSE)
clip.demo(1, 2, TRUE, FALSE)
clip.demo <- function(i, j, clip1, clip2) {
pushViewport(viewport(layout.pos.col=i,
layout.pos.row=j))
pushViewport(viewport(width=0.6, height=0.6, clip=clip1))
iNZightPlot(11:20, new = FALSE)
#   grid.rect(gp=gpar(fill="white"))
#   grid.circle(r=0.55, gp=gpar(col="red", fill="pink"))
popViewport()
#   pushViewport(viewport(width=0.6, height=0.6, clip=clip2))
#   grid.polygon(x=c(0.5, 1.1, 0.6, 1.1, 0.5, -0.1, 0.4, -0.1),
#                y=c(0.6, 1.1, 0.5, -0.1, 0.4, -0.1, 0.5, 1.1),
#                gp=gpar(col="blue", fill="light blue"))
#   popViewport(2)
}
grid.newpage()
pushViewport(viewport(layout=grid.layout(2, 2)))
clip.demo(1, 1, FALSE, FALSE)
clip.demo(1, 2, TRUE, FALSE)
clip.demo(2, 1, FALSE, TRUE)
clip.demo(2, 2, TRUE, TRUE)
# This is like par(mfrow = c(2, 1))
?gpairs
library(gpairs)
?gpairs
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
data
choices=colnames(data)[1:3]
print(choices)
!is.null(choices)||length(choices)==1
is.null(choices)||length(choices)==1
choices.ind = which(colnames(data)%in%choices)
gpairs(data[,choices.ind])
warnings()
choices.ind = which(colnames(data)%in%choices)
gpairs(data[,choices.ind])
choices.ind = which(colnames(data)%in%choices)
temp = apply(data[,choices.ind],2,function(x){if(is.character)as.factor(x)else x})
temp = apply(data[,choices.ind],2,function(x){if(is.character){as.factor(x)}else{x})
temp = apply(data[,choices.ind],2,function(x){if(is.character){as.factor(x)}else{x}})
temp = apply(data[,choices.ind],2,function(x){if(is.character(x)){as.factor(x)}else{x}})
gpairs(temp)
gpairs(temp)
temp
temp = apply(data[,choices.ind],2,function(x){if(is.character(x)){as.factor(x)}else{x}})
temp
temp[] = lapply(data[,choices.ind],function(x){if(is.character(x)){as.factor(x)}else{x}})
temp
temp[] = do.call(cbind(lapply(data[,choices.ind],function(x){if(is.character(x)){as.factor(x)}else{x}}))
temp = do.call(cbind,lapply(data[,choices.ind],function(x){if(is.character(x)){as.factor(x)}else{x}}))
gpairs(temp)
temp = do.call(cbind,lapply(data[,choices.ind],function(x){if(is.character(x)){as.factor(x)}else{x}}))
gpairs(temp)
shiny::runApp()
temp
temp = do.call(cbind,lapply(data[,choices.ind],function(x){if(is.character(x)){factor(x,levels=unique(x))}else{x}}))
temp
data
temp = do.call(cbind,lapply(data[,choices.ind],function(x){if(is.character(x)){factor(x,levels=unique(x))}else{x}}))
temp
b=data[,1]
b
factor(b)
temp
class(temp[,1])
class(temp)
temp = do.call(cbind,lapply(data[,choices.ind],function(x){if(is.character(x)){data.frame(factor(x,levels=unique(x)))}else{data.frame(x)}}))
temp
class(temp)
class(temp[,1])
class(temp[,2])
class(temp[,3])
shiny::runApp()
?tabPanel
?tabSetPanel
?tabsetPanel
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
bootstrappage
?bootstrapPage
?c olumn
?column
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?fixedPage
?fluidPage
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
selectInput
?selectInput
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?actionButton
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?updateCheckboxInput
iNZightPlot
?iNZightPlot
shiny::runApp()
iNZpar
?iNZpar
??iNZpar
library(iNZightPlot)
library(iNZight)
?iNZpar
??iNZpar
?modifyList
list(list(a="1",b="2"),list(a=3,b=4))
modifyList(list(list(a="1",b="2"),list(a=3,b=4)))
modifyList(list(list(a="1",b="2"),list(a=3,b=4)),val=c(letters[5:6]))
foo <- list(a = 1, b = list(c = "a", d = FALSE))
bar <- modifyList(foo, list(e = 2, b = list(d = TRUE)))
str(foo)
str(bar)
?reactiveValuesToList
View(data)
View(data)
summary(1:10)
summary(1:10)$min
summary(1:10)["min"]
summary(1:10)[1]
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
quantile(c(1,2,4,2,4,5,6,78,NA,4,2,5,NA,0,9,2))
shiny::runApp()
?textOutput
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?updateText
?updateTextInput
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?iNZightPlot
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
colors
colors()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?navlistPanel
shiny::runApp()
shiny::runApp()
?tabsetPanel
shiny::runApp()
