{
    "contents" : "#######################################\n# Manage datasets in/out of iNZight\n#######################################\n\n\n#################\n\noutput$ui_Manage <- renderUI({\n  list(wellPanel(\n      radioButtons(inputId = \"dataType\", label = \"Load data:\", c(\n        #\".rda\" = \"rda\", \n        \".csv\" = \"csv\",                                              \n        #\"clipboard\" = \"clipboard\", \n        \"examples\" = \"examples\",\n        \"URL\" = \"URL\"), \n        inline=TRUE,\n        selected = \"csv\"),\n      conditionalPanel(condition = \"input.dataType != 'clipboard' && input.dataType != 'examples'\",\n        conditionalPanel(condition = \"input.dataType == 'csv'\",\n          checkboxInput('header', 'Header', TRUE),\n          checkboxInput('rowNames', 'First column as row names', FALSE),\n          radioButtons('sep', '', c(Comma=',', Semicolon=';', Tab='\\t'), ',')\n        ),\n        fileInput('uploadfile', '', multiple=TRUE)\n      ),\n      conditionalPanel(condition = \"input.dataType == 'clipboard'\",\n        actionButton('loadClipData', 'Paste data')\n      ),\n      conditionalPanel(condition = \"input.dataType == 'examples'\",\n        actionButton('loadExampleData', 'Load examples')\n      )\n    ),\n    wellPanel(\n      radioButtons(inputId = \"saveAs\", label = \"Save data:\", \n                   c(\n                     \".rda\" = \"rda\", \n                     \".csv\" = \"csv\", \n                     \"copy to clipboard\" = \"clipboard\"), \n        selected = \"csv\"),\n      checkboxInput(\"man_add_descr\",\"Add/edit data description\", FALSE),\n      conditionalPanel(condition = \"input.man_add_descr == true\",\n        actionButton('updateDescr', 'Update description')\n      ),\n      conditionalPanel(condition = \"input.saveAs == 'clipboard'\",\n        actionButton('saveClipData', 'Copy data')\n      ),\n      conditionalPanel(condition = \"input.saveAs != 'clipboard' && input.man_add_descr == false\",\n        downloadButton('downloadData', 'Save')\n      )\n    ),\n    wellPanel(\n      numericInput('globalrowNum', 'Adjusting the showing row number in this App', value = 15, min = 0, step = 1)\n      ),\n    wellPanel(\n      # returnTextInput(\"data_rename\", \"Rename dataset:\", input$datasets),\n      textInput(\"data_rename\", \"\", input$datasets),\n      actionButton('renameButton', 'Rename dataset')\n     ),\n    wellPanel(\n      uiOutput(\"uiRemoveDataset\"),\n      actionButton('removeDataButton', 'Remove data')\n    )\n    #helpModal('Manage','manageHelp',inclMD(\"tools/help/manage.md\"))\n  )\n})\n\n# updating the dataset description\nobserve({\n  if(is.null(input$updateDescr) || input$updateDescr == 0) return()\n  isolate({\n    values[[paste0(input$datasets,\"_descr\")]] <- input$man_data_descr\n    updateCheckboxInput(session = session, \"man_add_descr\",\"Add/edit data description\", FALSE)\n  })\n})\n\nobserve({\n  if(is.null(input$data_rename)) return()\n  if(is.null(input$renameButton) || input$renameButton == 0) return()\n\n  isolate({\n    # names(values)[names(values)==input$datasets] <- input$data_rename \n    values[[input$data_rename]] <- getdata()\n    values[[input$datasets]] <- NULL\n    values[[paste0(input$data_rename,\"_descr\")]] <- values[[paste0(input$datasets,\"_descr\")]]\n    values[[paste0(input$datasets,\"_descr\")]] <- NULL\n\n    ind <- which(input$datasets == values[['datasetlist']])\n    values[['datasetlist']][ind] <- input$data_rename\n\n    updateSelectInput(session, \"datasets\", label = \"Already Loaded:\", choices = values$datasetlist,\n      selected = input$data_rename)\n  })\n})\n\n# managing the description of the dataset\ndataDescriptionOutput <- function(ret = 'html') {\n  descr <- values[[paste0(input$datasets,\"_descr\")]]\n  if(is.null(descr) || descr == \"\") {\n    return(\"\")  # if there is no data description\n  } else {\n    # if there is a data description and the 'add/edit' box has been checked\n    ifelse(ret == 'md',return(descr), \n      return(suppressWarnings(markdownToHTML(text = descr, stylesheet=\"www/empty.css\"))))\n  }\n}\n\n# removing datasets\noutput$uiRemoveDataset <- renderUI({\n  # Drop-down selection of data set to remove\n  selectInput(inputId = \"removeDataset\", label = \"Remove data from memory:\", \n    choices = values$datasetlist, selected = NULL, multiple = TRUE)\n})\n\nobserve({\n  # removing datasets\n  if(is.null(input$removeDataButton) || input$removeDataButton == 0) return()\n  isolate({\n\n    datasets <- values[['datasetlist']]\n    if(length(datasets) > 1) {         # don't remove the last dataset\n      removeDataset <- input$removeDataset  \n      if(length(datasets) == length(removeDataset)) {\n        # datasets <- \"\"\n        removeDataset <- removeDataset[-1]\n      }\n      for(rem in removeDataset) {\n        values[[rem]] <- NULL\n      }\n      datasets <- datasets[-which(datasets %in% removeDataset)]\n      values[['datasetlist']] <- datasets\n    }\n  })\n})\n\n# saving data\nobserve({\n  # 'saving' data to clipboard\n  if(is.null(input$saveClipData) || input$saveClipData == 0) return()\n  isolate({\n    os_type <- .Platform$OS.type\n    if (os_type == 'windows') {\n      write.table(getdata(), \"clipboard\", sep=\"\\t\", row.names=FALSE)\n    } else { \n      write.table(getdata(), file = pipe(\"pbcopy\"), row.names = FALSE, sep = '\\t')\n    }\n    updateRadioButtons(session = session, inputId = \"saveAs\", label = \"Save data:\", \n                       c(\n                         \".rda\" = \"rda\", \n                         \".csv\" = \"csv\", \n                         \"copy to clipboard\" = \"clipboard\"), \n                       selected = \"csv\")\n  })\n})\n\noutput$downloadData <- downloadHandler(\n  filename = function() { paste(input$datasets,'.',input$saveAs, sep='') },\n  content = function(file) {\n\n    ext <- input$saveAs\n    robj <- input$datasets\n\n    if(ext == 'rda') {\n      if(input$man_data_descr != \"\") {\n\n        # save data description\n        dat <- getdata()\n        attr(dat,\"description\") <- values[[paste0(robj,\"_descr\")]]\n        assign(robj, dat)\n        save(list = robj, file = file)\n      } else {\n        assign(robj, getdata())\n        save(list = robj, file = file)\n      }\n    } else if(ext == 'csv') {\n      assign(robj, getdata())\n      write.csv(get(robj), file)\n    }\n  },\n  contentType = \"text/csv\"  # optional\n)\n\n# loading data\nobserve({\n  # loading files from disk\n  inFile <- input$uploadfile\n  # if(!is.null(inFile) && length(inFile) > 0) {\n  if(!is.null(inFile) && !is.na(inFile)) {\n    isolate({\n      # iterating through the files to upload\n      for(i in 1:(dim(inFile)[1])) loadUserData(inFile[i,'name'], inFile[i,'datapath'], input$dataType)\n    })\n  }\n})\n\n# loading all examples files (linked to helpfiles)\nobserve({\n  if(is.null(input$loadExampleData) || input$loadExampleData == 0) return()\n  isolate({\n\n    # loading data bundled with Radiant\n    path <- \"data/data_pack/\"\n    examples <- list.files(path)\n\n    for(ex in examples) loadUserData(ex, paste0(path,ex), 'rda')\n\n    # loading data available for Rady students\n    path <- \"data/data_rady/\"\n    examples <- list.files(path)\n\n    for(ex in examples) loadUserData(ex, paste0(path,ex), 'rda')\n\n    # sorting files alphabetically\n    values[['datasetlist']] <- sort(values[['datasetlist']])\n  })\n})\n\n# observe({\n#   # 'reading' data from clipboard\n#   if(is.null(input$loadClipData) || input$loadClipData == 0) return()\n#   isolate({\n#     os_type <- .Platform$OS.type\n#     if (os_type == 'windows') {\n#       \n#       dat <- try(read.table(\"clipboard\", header = TRUE, sep = '\\t'), silent = TRUE)\n#       if(is(dat, 'try-error')) dat <- c(\"Data from clipboard was not well formatted. Try exporting the data to csv format.\")\n#     } else { \n# \n#       dat <- try(read.table(pipe(\"pbpaste\"), header = TRUE, sep = '\\t'), silent = TRUE)\n#       if(is(dat, 'try-error')) dat <- c(\"Data from clipboard was not well formatted. Try exporting the data to csv format.\")\n#     }\n# \n#     values[['xls_data']] <- as.data.frame(dat)\n#     values[['datasetlist']] <- unique(c('xls_data',values[['datasetlist']]))\n#     updateRadioButtons(session = session, inputId = \"dataType\", label = \"Load data:\", c(\".rda\" = \"rda\", \".csv\" = \"csv\", \"clipboard\" = \"clipboard\", \"examples\" = \"examples\"), selected = \".rda\")\n#   })\n# })\n\nloadUserData <- function(filename, uFile, ext) {\n\n  # ext <- file_ext(filename)\n  # filename <- \"test.rda\"\n  # ext <- 'rda'\n  objname <- sub(paste(\".\",ext,sep = \"\"),\"\",basename(filename))\n  # ext <- tolower(ext)\n\n  # if(ext == 'rda' || ext == 'rdata') {\n  if(ext == 'rda') {\n    # objname will hold the name of the object(s) inside the R datafile\n    robjname <- load(uFile)\n\n    if(length(robjname) > 1) {\n      # keeping this bit for legacy\n      values[[objname]] <- as.data.frame(get(robjname[-which(robjname == \"description\")]))\n      values[[paste0(objname,\"_descr\")]] <- get(\"description\")\n    } else {\n      values[[objname]] <- as.data.frame(get(robjname))\n      values[[paste0(objname,\"_descr\")]] <- attr(values[[objname]], \"description\")\n    }\n  }\n\n  if(length(values[['datasetlist']]) == 0 || values[['datasetlist']][1] == '') {\n    values[['datasetlist']] <- c(objname)\n  } else {\n    values[['datasetlist']] <- unique(c(objname,values[['datasetlist']]))\n  }\n\n  if(ext == 'sav') {\n    values[[objname]] <- as.data.frame(as.data.set(spss.system.file(uFile)))\n  } else if(ext == 'dta') {\n    values[[objname]] <- read.dta(uFile)\n  } else if(ext == 'csv') {\n    rowNames <- NULL\n    if (input$rowNames) \n      rowNames <- 1\n    \n    values[[objname]] <- read.csv(uFile, header=input$header, comment.char = \"#\",\n                                  sep=input$sep, row.names = rowNames,\n                                  na.strings=c(\"NA\",\"NULL\"))\n  }\n}\n\noutput$uiDatasets <- renderUI({\n  # Drop-down selection of data set\n  selectInput(inputId = \"datasets\", label = \"Already Loaded:\", choices = values$datasetlist, \n    selected = state_init(\"datasets\"), multiple = FALSE)\n})\n\noutput$htmlDataExample <- renderText({\n\n  \n  \n  dat <- getdata()\n  if(is.null(dat)) return()\n\n  # Show only the first k rows\n  nr.intial <- 0\n  if (!is.null(input$globalrowNum))\n    nr.intial <- input$globalrowNum\n  nr <- min(nr.intial,nrow(dat))\n  dat <- data.frame(dat[1:nr,, drop = FALSE])\n  dat <- date2character_dat(dat) # dealing with dates\n  html <- print(xtable::xtable(dat), type='html', print.results = FALSE)\n  html <- sub(\"<TABLE border=1>\",\"<table class='table table-condensed table-hover'>\", html)\n  Encoding(html) <- 'UTF-8'\n  html\n})\n\n",
    "created" : 1412722134439.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3739969821",
    "id" : "5C7A65E1",
    "lastKnownWriteTime" : 1412722294,
    "path" : "~/git/iNZight-Online/tools/data/manage.R",
    "project_path" : "tools/data/manage.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}